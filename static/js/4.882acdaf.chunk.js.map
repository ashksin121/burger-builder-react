{"version":3,"sources":["Components/UI/Input/Input.js","Containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","input","props","inputElement","inputClasses","invalid","shouldValidate","touched","elementType","a","createElement","Object","assign","className","elementConfig","value","onChange","changed","options","map","option","key","displayValue","label","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignUp","inputChanged","event","controlName","updatedControls","updateObject","_this","C_Users_Ashish_Kirti_Singh_demo_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formArray","push","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_Components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_8__","loading","_Components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_11__","errorMessage","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_7__","to","onSubmit","_Components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_9__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"0FAAA,IAAAA,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAC,EAAA,KAsCeG,IAnCD,SAACC,GAEX,IAAIC,EAAa,KACbC,EAAc,eAMlB,OAJGF,EAAMG,SAAWH,EAAMI,gBAAkBJ,EAAMK,UAC9CH,EAAa,wBAGVF,EAAMM,aACT,IAAK,QACDL,EAAaJ,EAAAU,EAAAC,cAAA,QAAAC,OAAAC,OAAA,CAAOC,UAAWT,GAAkBF,EAAMY,cAA1C,CAAyDC,MAAOb,EAAMa,MAAOC,SAAUd,EAAMe,WAC1G,MACJ,IAAK,WACDd,EAAaJ,EAAAU,EAAAC,cAAA,WAAAC,OAAAC,OAAA,CAAUC,UAAWT,GAAkBF,EAAMY,cAA7C,CAA4DC,MAAOb,EAAMa,MAAOC,SAAUd,EAAMe,WAC7G,MACJ,IAAK,SACDd,EAAaJ,EAAAU,EAAAC,cAAA,UAAQG,UAAWT,EAAcW,MAAOb,EAAMa,MAAOC,SAAUd,EAAMe,SACzEf,EAAMY,cAAcI,QAAQC,IAAI,SAAAC,GAAM,OACnCrB,EAAAU,EAAAC,cAAA,UAAQW,IAAKD,EAAOL,MAAOA,MAAOK,EAAOL,OAAQK,EAAOE,iBAGpE,MACJ,QACInB,EAAaJ,EAAAU,EAAAC,cAAA,QAAAC,OAAAC,OAAA,CAAOC,UAAWT,GAAkBF,EAAMY,cAA1C,CAAyDC,MAAOb,EAAMa,MAAOC,SAAUd,EAAMe,WAGlH,OACIlB,EAAAU,EAAAC,cAAA,OAAKG,UAAU,SACXd,EAAAU,EAAAC,cAAA,SAAOG,UAAU,SAASX,EAAMqB,OAC/BpB,gNCvBPqB,qNAEFC,MAAQ,CACJC,SAAU,CACNC,MAAO,CACHnB,YAAa,QACbM,cAAe,CACXc,KAAM,QACNC,YAAa,gBAEjBd,MAAO,GACPe,WAAY,CACRC,UAAU,EACVC,SAAS,GAEbC,OAAM,EACN1B,SAAQ,GAEZ2B,SAAU,CACN1B,YAAa,QACbM,cAAe,CACXc,KAAM,WACNC,YAAa,YAEjBd,MAAO,GACPe,WAAY,CACRC,UAAU,EACVI,UAAW,GAEfF,OAAM,EACN1B,SAAQ,IAGhB6B,UAAU,KAWdC,aAAe,SAACC,EAAOC,GACnB,IAAMC,EAAkBC,YAAaC,EAAKjB,MAAMC,SAAZf,OAAAgC,EAAA,EAAAhC,CAAA,GAC/B4B,EAAcE,YAAaC,EAAKjB,MAAMC,SAASa,GAAc,CAC1DxB,MAAOuB,EAAMM,OAAO7B,MACpBkB,MAAOY,YAAcP,EAAMM,OAAO7B,MAAO2B,EAAKjB,MAAMC,SAASa,GAAaT,YAC1EvB,SAAS,MAGjBmC,EAAKI,SAAS,CAACpB,SAAUc,OAG7BO,cAAgB,SAACT,GACbA,EAAMU,iBACNN,EAAKxC,MAAM+C,OAAOP,EAAKjB,MAAMC,SAASC,MAAMZ,MAAO2B,EAAKjB,MAAMC,SAASQ,SAASnB,MAAO2B,EAAKjB,MAAMW,aAGtGc,sBAAwB,WACpBR,EAAKI,SAAS,SAAAK,GACV,MAAO,CACHf,UAAWe,EAAUf,gGA1BzBgB,KAAKlD,MAAMmD,gBAAkD,MAAhCD,KAAKlD,MAAMoD,kBACxCF,KAAKlD,MAAMqD,yDA8BT,IAAAC,EAAAJ,KAEAK,EAAY,GAElB,IAAI,IAAIpC,KAAO+B,KAAK3B,MAAMC,SACtB+B,EAAUC,KAAK,CACXC,GAAItC,EACJuC,OAAQR,KAAK3B,MAAMC,SAASL,KAIpC,IAAIwC,EAAOJ,EAAUtC,IAAI,SAAA2C,GAAW,OAChCC,EAAAtD,EAAAC,cAACsD,EAAA,EAAD,CACI3C,IAAKyC,EAAYH,GACjBnD,YAAasD,EAAYF,OAAOpD,YAChCM,cAAegD,EAAYF,OAAO9C,cAClCC,MAAO+C,EAAYF,OAAO7C,MAC1BV,SAAUyD,EAAYF,OAAO3B,MAC7B1B,QAASuD,EAAYF,OAAOrD,QAC5BD,eAAgBwD,EAAYF,OAAO9B,WACnCb,QAAS,SAACqB,GAAD,OAAWkB,EAAKnB,aAAaC,EAAMwB,EAAYH,SAG7DP,KAAKlD,MAAM+D,UACVJ,EAAOE,EAAAtD,EAAAC,cAACwD,EAAA,EAAD,OAGX,IAAIC,EAAe,KAEhBf,KAAKlD,MAAMkE,QACVD,EACIJ,EAAAtD,EAAAC,cAAA,SAAI0C,KAAKlD,MAAMkE,MAAMC,UAI7B,IAAIC,EAAe,KAMnB,OAJGlB,KAAKlD,MAAMqE,kBACVD,EAAeP,EAAAtD,EAAAC,cAAC8D,EAAA,EAAD,CAAUC,GAAIrB,KAAKlD,MAAMoD,oBAIxCS,EAAAtD,EAAAC,cAAA,OAAKG,UAAU,QACVyD,EACAH,EACDJ,EAAAtD,EAAAC,cAAA,QAAMgE,SAAUtB,KAAKL,eAChBc,EACDE,EAAAtD,EAAAC,cAACiE,EAAA,EAAD,CAAQC,QAAQ,WAAhB,WAEJb,EAAAtD,EAAAC,cAACiE,EAAA,EAAD,CACIE,QAAUzB,KAAKF,sBACf0B,QAAQ,UAFZ,aAEgCxB,KAAK3B,MAAMW,SAAW,SAAW,kBAvH9D0C,cA8IJC,sBAjBS,SAAAtD,GACpB,MAAO,CACHwC,QAASxC,EAAMuD,KAAKf,QACpBG,MAAO3C,EAAMuD,KAAKZ,MAClBG,gBAAsC,OAArB9C,EAAMuD,KAAKC,MAC5B5B,eAAgB5B,EAAMyD,cAAcC,SACpC7B,iBAAkB7B,EAAMuD,KAAK1B,mBAIV,SAAA8B,GACvB,MAAO,CACHnC,OAAQ,SAACtB,EAAOO,EAAUE,GAAlB,OAA+BgD,EAASC,IAAa1D,EAAOO,EAAUE,KAC9EmB,sBAAuB,kBAAM6B,EAASC,IAA4B,SAI3DN,CAA4CvD","file":"static/js/4.882acdaf.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Input.css';\r\n\r\nconst input = (props) => {\r\n\r\n    let inputElement=null;\r\n    let inputClasses =\"InputElement\";\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses=\"InputElement Invalid\";\r\n    }\r\n\r\n    switch(props.elementType) {\r\n        case('input'):\r\n            inputElement=<input className={inputClasses} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n            break;\r\n        case('textarea'):\r\n            inputElement=<textarea className={inputClasses} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n            break;\r\n        case('select'):\r\n            inputElement=<select className={inputClasses} value={props.value} onChange={props.changed} >\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                    ))}\r\n                </select>;\r\n            break;\r\n        default:\r\n            inputElement=<input className={inputClasses} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"Input\">\r\n            <label className=\"Label\">{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );    \r\n}\r\n\r\nexport default input;","import React, {Component} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport Input from '../../Components/UI/Input/Input';\r\nimport Button from '../../Components/UI/Button/Button';\r\nimport {updateObject, checkValidity} from '../../shared/utility';\r\nimport Spinner from '../../Components/UI/Spinner/Spinner';\r\nimport * as actions from '../../store/actions/index';\r\nimport {connect} from 'react-redux';\r\nimport './Auth.css';\r\n\r\nclass Auth extends Component {\r\n\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            }\r\n        },\r\n        isSignUp: true\r\n    }\r\n\r\n    componentDidMount () {\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    inputChanged = (event, controlName) => {\r\n        const updatedControls = updateObject(this.state.controls, {\r\n            [controlName]: updateObject(this.state.controls[controlName], {\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            })\r\n        });\r\n        this.setState({controls: updatedControls});\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {\r\n                isSignUp: !prevState.isSignUp\r\n            }\r\n        })\r\n    }\r\n\r\n    render () {\r\n\r\n        const formArray = [];\r\n\r\n        for(let key in this.state.controls) {\r\n            formArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        let form = formArray.map(formElement => (\r\n            <Input \r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                touched={formElement.config.touched}\r\n                shouldValidate={formElement.config.validation}\r\n                changed={(event) => this.inputChanged(event,formElement.id)} />\r\n        ));\r\n\r\n        if(this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n\r\n        if(this.props.error ) {\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n\r\n        let authRedirect = null;\r\n\r\n        if(this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (\r\n            <div className=\"Auth\">\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button\r\n                    clicked= {this.switchAuthModeHandler}\r\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignUp ? 'SIGNIN' : 'SIGNUP'}</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);"],"sourceRoot":""}