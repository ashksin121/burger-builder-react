{"version":3,"sources":["Components/UI/Input/Input.js","Containers/Checkout/ContactData/ContactData.js","Components/Order/CheckoutSummary/CheckoutSummary.js","Containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","input","props","inputElement","inputClasses","invalid","shouldValidate","touched","elementType","a","createElement","Object","assign","className","elementConfig","value","onChange","changed","options","map","option","key","displayValue","label","ContactData","state","orderForm","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElement","_this","order","ingredient","ings","price","orderData","userId","onOrderBurger","token","inputChanged","inputIdentifier","updatedElement","updateObject","target","checkValidity","updatedForm","defineProperty","setState","_this2","this","formArray","push","id","config","form","react_default","onSubmit","Input","Button","btnType","disabled","loading","Spinner","Component","connect","burgerBuilder","ingredients","auth","dispatch","actions","withErrorHandler","axios","checkoutSummary","style","width","margin","Burger","clicked","checkoutCancelled","checkoutContinued","Checkout","history","goBack","replace","summary","react_router","to","purchasedRedirect","purchased","CheckoutSummary_CheckoutSummary","path","match","component"],"mappings":"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","file":"static/js/3.16eef4c5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Input.css';\r\n\r\nconst input = (props) => {\r\n\r\n    let inputElement=null;\r\n    let inputClasses =\"InputElement\";\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses=\"InputElement Invalid\";\r\n    }\r\n\r\n    switch(props.elementType) {\r\n        case('input'):\r\n            inputElement=<input className={inputClasses} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n            break;\r\n        case('textarea'):\r\n            inputElement=<textarea className={inputClasses} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n            break;\r\n        case('select'):\r\n            inputElement=<select className={inputClasses} value={props.value} onChange={props.changed} >\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                    ))}\r\n                </select>;\r\n            break;\r\n        default:\r\n            inputElement=<input className={inputClasses} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"Input\">\r\n            <label className=\"Label\">{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );    \r\n}\r\n\r\nexport default input;","import React,{Component} from 'react';\r\nimport './ContactData.css'; \r\nimport axios from '../../../axios-orders';\r\nimport Button from '../../../Components/UI/Button/Button';\r\nimport Spinner from '../../../Components/UI/Spinner/Spinner';\r\nimport Input from '../../../Components/UI/Input/Input';\r\nimport {connect} from 'react-redux';\r\nimport {updateObject, checkValidity} from '../../../shared/utility';\r\nimport * as actions from '../../../store/actions/index';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\n\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Zip Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6,\r\n                    maxLength: 6\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your Email'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'fastest', displayValue: 'Fastest'},\r\n                        {value: 'cheapest', displayValue: 'Cheapest'}\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation:{},\r\n                valid:true\r\n            }\r\n        },\r\n        formIsValid:false\r\n        // loading:false\r\n    }\r\n\r\n    // checkValidity(value,rules) {\r\n    //     let isValid=true;\r\n    //     if(rules.required) {\r\n    //         isValid = value.trim() !== '' && isValid;\r\n    //     }\r\n\r\n    //     if(rules.minLength) {\r\n    //         isValid= value.length >= rules.minLength && isValid;\r\n    //     }\r\n\r\n    //     if(rules.maxLength) {\r\n    //         isValid= value.length <= rules.maxLength && isValid;\r\n    //     }\r\n\r\n    //     return isValid;\r\n    // }\r\n\r\n    orderHandler =(event) => {\r\n        event.preventDefault();\r\n        // this.setState({loading:true});\r\n        const formData= {};\r\n        for (let formElement in this.state.orderForm){\r\n            formData[formElement]=this.state.orderForm[formElement].value;\r\n        }\r\n        const order = {\r\n        ingredient : this.props.ings,\r\n        price : this.props.price,\r\n        orderData: formData,\r\n        userId: this.props.userId     \r\n        }\r\n        this.props.onOrderBurger(order, this.props.token);\r\n        // axios.post('/orders.json',order)\r\n        // .then(response => {\r\n        //     this.setState({loading:false});\r\n        //     this.props.history.push('/');\r\n        // })\r\n        // .catch(error => {\r\n        //     this.setState({loading:false});\r\n        // });\r\n    }\r\n\r\n    inputChanged = (event,inputIdentifier) => {\r\n        const updatedElement = updateObject(this.state.orderForm[inputIdentifier], {\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        });\r\n        const updatedForm = updateObject(this.state.orderForm, {\r\n            [inputIdentifier]: updatedElement\r\n        });\r\n\r\n        let formIsValid = true;\r\n        for(let inputIdentifier in updatedForm) {\r\n            formIsValid=updatedForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({orderForm:updatedForm,formIsValid: formIsValid});\r\n    }\r\n\r\n    render(){\r\n\r\n        const formArray = [];\r\n\r\n        for(let key in this.state.orderForm) {\r\n            formArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formArray.map(formElement => (\r\n                    <Input \r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        touched={formElement.config.touched}\r\n                        shouldValidate={formElement.config.validation}\r\n                        changed={(event) => this.inputChanged(event,formElement.id)} />\r\n                ))}\r\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>Order</Button>\r\n            </form>\r\n        );\r\n        if(this.props.loading){\r\n            form=<Spinner />;\r\n        }\r\n        return(\r\n            <div className=\"ContactData\">\r\n                <h4>Enter your contact data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.price,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger : (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData,axios));","import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport './CheckoutSummary.css';\r\n\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n        <div className=\"CheckoutSummary\">\r\n            <h1>Hope it tastes well!!</h1>\r\n            <div style={{width:'100%',margin:'auto'}}>\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button \r\n            btnType=\"Danger\"\r\n            clicked={props.checkoutCancelled}>CANCEL</Button>\r\n            <Button \r\n            btnType=\"Success\"\r\n            clicked={props.checkoutContinued}>CONTINUE</Button>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default checkoutSummary;","import React,{Component} from 'react';\r\nimport {Route, Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport ContactData from '../../Containers/Checkout/ContactData/ContactData';\r\nimport CheckoutSummary from '../../Components/Order/CheckoutSummary/CheckoutSummary';\r\n//import * as actions from '../../store/actions/index';\r\n//import { stat } from 'fs';\r\n\r\nclass Checkout extends Component {\r\n\r\n    checkoutCancelled = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    checkoutContinued = () => {\r\n        this.props.history.replace('/checkout/contact_data');\r\n    }\r\n\r\n    render(){\r\n        let summary = <Redirect to=\"/\" />\r\n        if(this.props.ings) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\r\n            summary = (\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary \r\n                        ingredients={this.props.ings}\r\n                        checkoutCancelled={this.checkoutCancelled}\r\n                        checkoutContinued={this.checkoutContinued} />\r\n                    <Route path={this.props.match.path + '/contact_data'} \r\n                        component={ContactData} />\r\n                </div>                \r\n            );\r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}